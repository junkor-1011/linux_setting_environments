
# default editor
# if [ -x /usr/bin/nvim ]; then
if type nvim > /dev/null 2>&1; then
    export EDITOR=$(which nvim)
    alias vim=$(which nvim)
    alias vi='/usr/bin/vim'
else
    export EDITOR=/usr/bin/vim
fi
if [ -x ${HOME}/bin/nvim-nightly ]; then
    alias nvim=${HOME}/bin/nvim-nightly
    alias vim=${HOME}/bin/nvim-nightly
fi

## X11 for client machine ##
# export DISPLAY=localhost:0.0
# for WSL2 (need to set system & antivirus software's firewall)
# export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0
# export LIBGL_ALWAYS_INDIRECT=1
# alias set_x11local="export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0; export LIBGL_ALWAYS_INDIRECT=1"
# alias unset_x11local="unset DISPLAY; unset LIBGL_ALWAYS_INDIRECT"


# *** Docker for Windows in WSL ***
#export DOCKER_HOST=tcp://localhost:2375
# if [ -x /usr/bin/wslsys ]; then
#     export DOCKER_HOST=tcp://0.0.0.0:2375
#     alias docker="DOCKER_HOST=${DOCKER_HOST} docker"
# fi

# type set_prompt_hostname > /dev/null 2>&1 && set_prompt_hostname

## nodejs ##
# export NODEJS_HOME=$HOME/LocalApps/nodejs
# export PATH=$NODEJS_HOME/bin:$PATH

## deno ##
if [ -d ${HOME}/.deno ]; then
    export DENO_INSTALL="${HOME}/.deno"
    export PATH="$DENO_INSTALL/bin:$PATH"
fi

## Go ##
type go >> /dev/null 2>&1
result_tmp=$?
if [ ${result_tmp} -ne 0 ];then
    export GOPATH=${HOME}/.go
elif [ -x /usr/local/go/bin/go ]; then
    export PATH=/usr/local/go/bin:${PATH}
    export GOPATH=${HOME}/.go
fi

## Rust
if [ -f "${HOME}/.cargo/env" ];then
    source "${HOME}/.cargo/env"
fi

## c++ for atcoder
if [ -f ${HOME}/LocalApps/atcoder/cpp/include/bits/stdc++.h ]; then
    export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:${HOME}/LocalApps/atcoder/cpp/include/
fi

## Pipenv
export PIPENV_VENV_IN_PROJECT=true

## pipx
if type pipx > /dev/null 2>&1; then
    eval "$(register-python-argcomplete pipx)"
fi

## user-original ##
export PATH=$HOME/bin:$PATH

if type sl > /dev/null 2>&1; then
    alias sl='sl -e'
fi

# aws
## awslocal(for LocalStack)
if type aws > /dev/null 2>&1; then
    alias awslocal='aws --endpoint-url=http://localhost:4566 --profile=localstack'
fi
## cdk
if type npx > /dev/null 2>&1; then
    alias cdk='npx aws-cdk'
fi

# cat alternative
if type batcat > /dev/null 2>&1; then
    # shellcheck disable=SC2139
    alias bat="$(\which batcat)"
fi

# AWS SAM
# if type sam > /dev/null 2>&1; then
#     export SAM_CLI_TELEMETRY=0
# fi

# ls alternative
if type lsd > /dev/null 2>&1; then
    alias la='lsd -AF'
    alias ll='lsd -alF'
    alias l='lsd -F'
elif type exa > /dev/null 2>&1; then
    alias la='exa -aF --icons --color=auto'
    alias ll='exa -alF --icons --color=auto'
    alias l='exa -F --icons --color=auto'
fi

# proxy
# set_proxy () {
#     local username
#     local password
#     local proxy_host
#     local proxy_port
#     local proxy_url
#     local no_proxy_content
#     username="xxxxxxx"
#     password="xxxxxxxx"
#     proxy_host="proxy.example.com"
#     proxy_port="80"
#     proxy_url="http://${username}:${password}@${proxy_host}:${proxy_port}"
#     no_proxy_content="localhost,127.0.0.1,local.example.com"
# 
#     export http_proxy="${proxy_url}"
#     export https_proxy="${proxy_url}"
#     export HTTP_PROXY="${proxy_url}"
#     export HTTPS_PROXY="${proxy_url}"
#     export no_proxy="${no_proxy_content}"
#     export NO_PROXY="${no_proxy_content}"
# }
# unset_proxy() {
#     unset http_proxy;
#     unset https_proxy;
#     unset HTTP_PROXY;
#     unset HTTPS_PROXY;
#     unset no_proxy;
#     unset NO_PROXY;
# }
# set_proxy

# modeline
# vim: set ft=sh ff=unix fileencoding=utf-8 expandtab ts=4 sw=4 :
